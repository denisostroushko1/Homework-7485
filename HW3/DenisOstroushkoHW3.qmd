---
title: "Denis Ostroushko - HW3"
format: 
  pdf:
    toc: false
execute: 
  echo: false
  warning: false
  message: false
---


```{r read packages }
total_nchar = nchar(getwd())
remove_nchar = nchar("HW1")
path = substr(getwd(), 1, total_nchar - remove_nchar)
source(paste0(path,"Master Packages.R"))
```

```{r read in data}
data1 <- load("OPT_Study_PUBH7485_8485_2023.Rdata")

# Notice that the result of this function is not assigned to an object name. When R calls load(), all of the R objects saved in the file are loaded into R. The names given to these objects when they were originally saved will be given to them when they are loaded. The command >  ls() can be used to print out all of the objects currently loaded into R.

# https://higgi13425.github.io/medicaldata/reference/opt.html

#     summary(data)
```

# Introduction 

### Imputation and Variable Processing 

Drop Hisp

BMI, BL.Cig.Day, , BL.Drks.Day, , N.living.kids impute with medians like N.prev.preg, Birthweight

Use.Alc, Drug.Add impute with modes like Race_ethnicity, Use.Tob

```{r}


## imputation 

median_bw <- median(data$Birthweight, na.rm = T)
median_npp <- median(data$N.prev.preg, na.rm = T)
median_bmi <- median(data$BMI, na.rm = T)
median_bl_cig <- median(data$BL.Cig.Day, na.rm = T)
median_bl_drinks <- median(data$BL.Drks.Day, na.rm = T)
median_kids <- median(data$N.living.kids, na.rm = T)

# mode_drug <- 
#   names(
#     (table(data$Drug.Add) %>% sort())[length(table(data$Drug.Add))]
#     )

mode_alc <- 
  names(
    (table(data$Use.Alc) %>% sort())[length(table(data$Use.Alc))]
    )

mode_race <- 
  names(
    (table(data$Race_ethnicity) %>% sort())[length(table(data$Race_ethnicity))]
    )

mode_tob <- 
  as.character(names(
    (table(data$Use.Tob) %>% sort())[length(table(data$Use.Tob))]
    ))

data[is.na(data$Race_ethnicity), ]$Race_ethnicity <- mode_race
data[is.na(data$Use.Tob), ]$Use.Tob <- mode_tob
data[is.na(data$N.prev.preg), ]$N.prev.preg <- median_npp
data[is.na(data$Birthweight), ]$Birthweight <- median_bw
data[is.na(data$BMI), ]$BMI <- median_bmi
data[is.na(data$BL.Cig.Day), ]$BL.Cig.Day <- median_bl_cig
data[is.na(data$BL.Drks.Day), ]$BL.Drks.Day <- median_bl_drinks
data[is.na(data$N.living.kids), ]$N.living.kids <- median_kids
data[is.na(data$Drug.Add), ]$Drug.Add <- mode_drug
data[is.na(data$Use.Alc), ]$Use.Alc <- mode_alc


data <- 
  data %>% 
  select(-Hisp)

```

# Problem 1 

fit all models below 

```{r train all models }
#| echo: true
logistic_regression_a <- 
  glm(
    I(data$Group == "T") %>% as.numeric() ~ 
      
        Race_ethnicity + Public.Asstce +
        Use.Tob + Live.PTB + 
      
        N.prev.preg + BL.GE + BL..BOP + BL..PD.4 + BL..CAL.3, 
          
    data = data, 
    family = "binomial"
  )

logistic_regression_b <- 
  glm(
    I(data$Group == "T") %>% as.numeric() ~ 
      
        Race_ethnicity + Public.Asstce +
        Use.Tob + Live.PTB + 
      
        poly(N.prev.preg,2) + 
        poly(BL.GE,5) + 
        poly(BL..BOP,5) + 
        poly(BL..PD.4,5) + 
        poly(BL..CAL.3, 2), 
          
    data = data, 
    family = "binomial"
  )

logistic_regression_c_full <- 
  glm(
    I(data$Group == "T") %>% as.numeric() ~ 
      
        (Race_ethnicity + Public.Asstce +
        Use.Tob + Live.PTB + 
      
        N.prev.preg + BL.GE + BL..BOP + BL..PD.4 + BL..CAL.3)^2, 
          
    data = data, 
    family = "binomial"
  )


logistic_regression_c_lower <- glm(I(data$Group == "T") %>% as.numeric() ~ 1, data, family = "binomial")

logistic_regression_c <- MASS::stepAIC(logistic_regression_c_lower, direction = "forward", trace = 0, 
                                       scope = list(upper = logistic_regression_c_full, 
                                                    lower = logistic_regression_c_lower))

data2 = data %>% select(- PID, - Birth.outcome, - GA.at.outcome, -Preg.ended...37.wk, -Birthweight, -Drug.Add) %>% 
  mutate(Race_ethnicity = as.factor(Race_ethnicity))

logistic_regression_d_full <- 
  glm(
    I(data$Group == "T") %>% as.numeric() ~ ., 
    data = data2, 
    family = "binomial"
  )


logistic_regression_c_lower <- glm(I(data$Group == "T") %>% as.numeric() ~ 1, data, family = "binomial")

logistic_regression_d <- MASS::stepAIC(logistic_regression_c_lower, direction = "forward", trace = 0, 
                                       scope = list(upper = logistic_regression_d_full, 
                                                    lower = logistic_regression_c_lower))

rf = randomForest(
  Group ~ ., 
  data = data, 
  ntree = 1000
)


```


```{r SMDs }

Variables = c(
    "Race_ethnicity", "Public.Asstce", "Use.Tob", "Live.PTB",  
     "N.prev.preg", "BL.GE", "BL..BOP", "BL..PD.4", "BL..CAL.3"
  )

other_vars <- 
  setdiff(
    colnames(data2),
    Variables
  )


### also apparently David wants the whole table here. So we need to include all vairables 

CreateTableOne(
  data = data, 
  strata = "Group", 
  vars = c(Variables, other_vars), 
  test = F, 
  smd = T
) -> raw_table_1

ExtractSmd(raw_table_1) ->  raw_SMD

# create weighted tables now: 

data$num_treat_flag <- ifelse(data$Group == "C", 1, 0)

trt = ifelse(data$Group == "T", 1, 0)

###
### A ### 
# weight is TRT/PS + (1-TRT)/(1-PS)
ps_a = logistic_regression_a$fitted.values
weight_a <- trt/ps_a + (1 - trt)/(1- ps_a) 
data_a <- svydesign(ids = ~ 1, data = data, weights = ~ weight_a)


tabWeighted_a <- 
  svyCreateTableOne(
    vars = c(Variables, other_vars), 
    strata = "Group",
    data = data_a, 
    test = FALSE, 
    smd = T
    )

ExtractSmd(tabWeighted_a) ->  SMD_a

### B ### 
ps_b = logistic_regression_b$fitted.values
weight_b <- trt/ps_b + (1 - trt)/(1- ps_b) 
data_b <- svydesign(ids = ~ 1, data = data, weights = ~ weight_b)


tabWeighted_b <- 
  svyCreateTableOne(
    vars = c(Variables, other_vars), 
    strata = "Group",
    data = data_b, 
    test = FALSE, 
    smd = T
    )

ExtractSmd(tabWeighted_b) ->  SMD_b

### C ### 
p_c = predict(logistic_regression_c, data, type = "response")
weight_c <- trt/p_c + (1 - trt)/(1- p_c) 
data_c <- svydesign(ids = ~ 1, data = data, weights = ~ weight_c)


tabWeighted_c <- 
  svyCreateTableOne(
    vars = c(Variables, other_vars), 
    strata = "Group",
    data = data_c, 
    test = FALSE, 
    smd = T
    )

ExtractSmd(tabWeighted_c) ->  SMD_c

### D ### 
p_d = logistic_regression_d$fitted.values
weight_d <- trt/p_d + (1 - trt)/(1- p_d)
data_d <- svydesign(ids = ~ 1, data = data, weights = ~ weight_d)


tabWeighted_d <- 
  svyCreateTableOne(
    vars = c(Variables, other_vars), 
    strata = "Group",
    data = data_d, 
    test = FALSE, 
    smd = T
    )

ExtractSmd(tabWeighted_d) ->  SMD_d

### RF ### 
p_e = rf$votes[,2]
weight_e <- trt/p_e + (1 - trt)/(1- p_e)
data_e <- svydesign(ids = ~ 1, data = data, weights = ~ weight_e)


tabWeighted_rf <- 
  svyCreateTableOne(
    vars = c(Variables, other_vars), 
    strata = "Group",
    data = data_e, 
    test = FALSE, 
    smd = T
    )

ExtractSmd(tabWeighted_rf) ->  SMD_e

#### ALL #####

all_SMDs = 
  rbind(
    data.frame(SMD_e) %>% mutate(type = "Random Forest", variable = rownames(.)),
    data.frame(SMD_d) %>% mutate(type = "Logistic Regression D", variable = rownames(.)),
    data.frame(SMD_c) %>% mutate(type = "Logistic Regression C", variable = rownames(.)),
    data.frame(SMD_b) %>% mutate(type = "Logistic Regression B", variable = rownames(.)),
    data.frame(SMD_a) %>% mutate(type = "Logistic Regression A", variable = rownames(.)),
    data.frame(raw_SMD) %>% mutate(type = "Unadjusted", variable = rownames(.))
  )  %>% 
  mutate(
    variable = factor(variable, 
                      levels = c(Variables, other_vars))
  )
```

```{r}
#| fig-width: 10
#| fig-height: 7
#| 
ggplot(data = all_SMDs, 
       mapping = aes(x = variable , y = X1.vs.2, group = type, color = type)) +
  geom_point() + 
  geom_line() + 
  theme_classic() + 
  scale_x_discrete(name = "") + 
  geom_hline(yintercept = 0) + 
  geom_vline(xintercept = 9, color = "blue", linetype = "dashed", size = 2, alpha = 0.5) + # this should be something minus 9  
  geom_hline(color = "red", linetype = "dashed", yintercept = 0.1, size = 2, alpha = 0.5) + 
  theme(
    legend.position = "bottom"
  ) +
  coord_flip() 

```

# Part B

## Pre-term pregnancies 

```{r all ate calculations }
# Augmented IPW 

pregnancy_model <- 
  glm(
    `Preg.ended...37.wk` ~ 
      Group + Race_ethnicity + Public.Asstce + Use.Tob + N.prev.preg + 
      Live.PTB + BL.GE + BL..BOP + BL..PD.4 + BL..CAL.3, 
    
    data = data, 
    family = "binomial"
  )
  
borthweight_model <- 
  lm(
    Birthweight ~ 
    Group *(Race_ethnicity + Public.Asstce + Use.Tob + 
              N.prev.preg + Live.PTB + BL.GE + BL..BOP + 
              BL..PD.4 + BL..CAL.3), 
    
    data = data
  )

# Step 1: get weigths 
prop_scores = logistic_regression_a$fitted.values
  
data_1 <- data_0 <- data
  
data_1$Group = "T"
data_0$Group = "C"

preg_y_1 = predict(object = pregnancy_model, newdata = data_1, type = "response")
preg_y_0 = predict(object = pregnancy_model, newdata = data_0, type = "response")

bw_y_1 = predict(object = borthweight_model, newdata = data_1)
bw_y_0 = predict(object = borthweight_model, newdata = data_0)

### record actual outcomes and treatment flags 
preg_y = ifelse(data$Preg.ended...37.wk == "Yes", 1, 0)
bw_y = data$Birthweight
trt_ind = ifelse(data$Group == "T", 1, 0)

  ### Pregnancy ATE   
  trt_ind * preg_y / prop_scores - 
    ((trt_ind - prop_scores)/prop_scores) * preg_y_1 -> E_Y_1
  
  (1 - trt_ind) * preg_y / (1 - prop_scores) - 
    ((1 - trt_ind) - (1 - prop_scores))/
    (1 - prop_scores) * preg_y_0 -> E_Y_0
  
  AIPW_preg_ate = mean(E_Y_1 - E_Y_0)
  
  ### Birthweight ATE 
    
  trt_ind * bw_y / prop_scores - 
    ((trt_ind - prop_scores)/prop_scores) * bw_y_1 -> E_Y_1
  
  (1 - trt_ind) * bw_y / (1 - prop_scores) - 
    ((1 - trt_ind) - (1 - prop_scores))/
    (1 - prop_scores) * bw_y_0 -> E_Y_0
  
  AIPW_bw_ate = mean(E_Y_1 - E_Y_0)
  
  AIPW_preg_ate
  AIPW_bw_ate
  
```

```{r}
#| eval: false 

K = 500

res <- 
  data.frame(
    i = 1:K, 
    AIPW_preg_ate = NA,
    AIPW_bw_ate = NA
  )

set.seed(718297)
for(i in 1:K){
  
  print(i)
  iter_data = data[sample(1:nrow(data), replace = T), ]
  
  #### train propensity score, pregnancy, and birth weights models 
  iter_prop_score <-  
    glm(I(iter_data$Group == "T") %>% as.numeric() ~ 
      
        Race_ethnicity + Public.Asstce +
        Use.Tob + Live.PTB + 
      
        N.prev.preg + BL.GE + BL..BOP + BL..PD.4 + BL..CAL.3, 
          
    data = iter_data, 
    family = "binomial"
  )
  
  iter_pregnancy_model <- 
    glm(
      `Preg.ended...37.wk` ~ 
        Group + Race_ethnicity + Public.Asstce + Use.Tob + N.prev.preg + 
        Live.PTB + BL.GE + BL..BOP + BL..PD.4 + BL..CAL.3, 
      
      data = iter_data, 
      family = "binomial"
    )
    
  iter_borthweight_model <- 
    lm(
      Birthweight ~ 
      Group *(Race_ethnicity + Public.Asstce + Use.Tob + 
                N.prev.preg + Live.PTB + BL.GE + BL..BOP + 
                BL..PD.4 + BL..CAL.3), 
      
      data = iter_data
    )
  
  #### propensity scores, counterfactuals 
  prop_scores = iter_prop_score$fitted.values
  
  iter_data_1 <- iter_data_0 <- iter_data
  
  iter_data_1$Group = "T"
  iter_data_0$Group = "C"
  
  preg_y_1 = predict(object = iter_pregnancy_model, newdata = iter_data_1, type = "response")
  preg_y_0 = predict(object = iter_pregnancy_model, newdata = iter_data_0, type = "response")
  
  bw_y_1 = predict(object = iter_borthweight_model, newdata = iter_data_1)
  bw_y_0 = predict(object = iter_borthweight_model, newdata = iter_data_0)
  
  ### record actual outcomes and treatment flags 
  preg_y = ifelse(iter_data$Preg.ended...37.wk == "Yes", 1, 0)
  bw_y = iter_data$Birthweight
  trt_ind = ifelse(iter_data$Group == "T", 1, 0)
  
  ### Pregnancy ATE   
  trt_ind * preg_y / prop_scores - 
    ((trt_ind - prop_scores)/prop_scores) * preg_y_1 -> E_Y_1
  
  (1 - trt_ind) * preg_y / (1 - prop_scores) - 
    ((1 - trt_ind) - (1 - prop_scores))/
    (1 - prop_scores) * preg_y_0 -> E_Y_0
  
  res$AIPW_preg_ate[i] = mean(E_Y_1 - E_Y_0)
  
  ### Birthweight ATE 
    
  trt_ind * bw_y / prop_scores - 
    ((trt_ind - prop_scores)/prop_scores) * bw_y_1 -> E_Y_1
  
  (1 - trt_ind) * bw_y / (1 - prop_scores) - 
    ((1 - trt_ind) - (1 - prop_scores))/
    (1 - prop_scores) * bw_y_0 -> E_Y_0
  
  res$AIPW_bw_ate[i] = mean(E_Y_1 - E_Y_0)
  
}

summary(res$AIPW_preg_ate)
summary(res$AIPW_bw_ate)

```


```{r}

preg_ates_hw1 <- read_csv("/Users/denisostroushko/Desktop/UofM MS/MS 2023 - 2 Fall/PUBH 7485/Homework-7485/HW1/pregnancy ate bootsrap.csv")

mean(preg_ates_hw1$ate) # This is Regression Adjustment 

preg_ates_hw2 <- read_csv('/Users/denisostroushko/Desktop/UofM MS/MS 2023 - 2 Fall/PUBH 7485/Homework-7485/HW2/prop_strat_pre_term_preg_ATE_bootsrap.csv')

mean(preg_ates_hw2$ATE_ipw) # this is IPW 
mean(preg_ates_hw2$ATE) # this is pss 

```

## Birthweights outcomes 

```{r}

bw = data$Birthweight

bw * trt / selected_weights - (trt - selected_weights)/selected_weights * trt_bw -> E_Y_1

(1 - trt) * bw / (1 - selected_weights) - ((1 - trt) - (1 - selected_weights))/(1 - selected_weights) * no_trt_bw -> E_Y_0

mean(E_Y_1 - E_Y_0)

```

```{r}


bw_ates_hw2 <- read_csv('/Users/denisostroushko/Desktop/UofM MS/MS 2023 - 2 Fall/PUBH 7485/Homework-7485/HW2/prop_strat_birthweight_ATE_bootsrap.csv')

mean(bw_ates_hw2$ATE_ipw) # this is IPW 
mean(bw_ates_hw2$ATE) # this is pss 

bw_ates_hw1 <- read_csv("/Users/denisostroushko/Desktop/UofM MS/MS 2023 - 2 Fall/PUBH 7485/Homework-7485/HW1/birthweight ate bootsrap.csv")

mean(bw_ates_hw1$ate) # This is Regression Adjustment 


```
