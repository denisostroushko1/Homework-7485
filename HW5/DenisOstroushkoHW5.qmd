---
title: "Denis Ostroushko - HW5"
format: 
  pdf:
    toc: false
execute: 
  echo: true
  warning: false
  message: false
---


```{r read packages }
#| echo: false 
#| results: hide
#| output: false
#| 
total_nchar = nchar(getwd())
remove_nchar = nchar("HW1")
path = substr(getwd(), 1, total_nchar - remove_nchar)
source(paste0(path,"Master Packages.R"))
```



```{r read in data}
#| echo: false 
data1 <- load("OPT_Study_PUBH7485_8485_2023_mediation.Rdata")

# Notice that the result of this function is not assigned to an object name. When R calls load(), all of the R objects saved in the file are loaded into R. The names given to these objects when they were originally saved will be given to them when they are loaded. The command >  ls() can be used to print out all of the objects currently loaded into R.

# https://higgi13425.github.io/medicaldata/reference/opt.html

#     summary(data)
```

# Introduction 

### Imputation and Variable Processing 

For the purpose of this assignment we retain the same imputation schemes we used in the previous two assignments. 
We will use imputation with the median of observed values and replace missing values with modes for categorical predictors. 

Since we will need to create two models that have all possible confounders in the data set, we need to be careful with 
variable inclusion. We drop variable `Hisp` because it is highly correlated with other variables that contain race and 
ethnic information. We also `Drug.Add` due to the issues with its imputation. When imputed with the most common level 
"No", which indicated no drug use, this variable has one unique level. Such zero variance predictors can cause problems 
with fitting models, so we will avoid using it in our analyses. 

Variables `BMI`, `BL.Cig.Day`, `BL.Drks.Day`, `N.living.kids` are imputed with medians like `N.prev.preg`, `Birthweight` in 
the previous assignments. 

`Use.Alc`  is imputed with a mode like `Race_ethnicity`, `Use.Tob`

**New variable for assignment 5: `V5..BOP`:** which has 91 missing values. We will impute the variable with the median 
of available data points. 

```{r imputation and data set preparation }
#| echo: false 
## imputation 

median_bw <- median(data$Birthweight, na.rm = T)
median_npp <- median(data$N.prev.preg, na.rm = T)
median_bmi <- median(data$BMI, na.rm = T)
median_bl_cig <- median(data$BL.Cig.Day, na.rm = T)
median_bl_drinks <- median(data$BL.Drks.Day, na.rm = T)
median_kids <- median(data$N.living.kids, na.rm = T)
median_bp_v5 <- median(data$V5..BOP, na.rm = T)
# mode_drug <- 
#   names(
#     (table(data$Drug.Add) %>% sort())[length(table(data$Drug.Add))]
#     )

mode_alc <- 
  names(
    (table(data$Use.Alc) %>% sort())[length(table(data$Use.Alc))]
    )

mode_race <- 
  names(
    (table(data$Race_ethnicity) %>% sort())[length(table(data$Race_ethnicity))]
    )

mode_tob <- 
  as.character(names(
    (table(data$Use.Tob) %>% sort())[length(table(data$Use.Tob))]
    ))

data[is.na(data$Race_ethnicity), ]$Race_ethnicity <- mode_race
data[is.na(data$Use.Tob), ]$Use.Tob <- mode_tob
data[is.na(data$N.prev.preg), ]$N.prev.preg <- median_npp
data[is.na(data$Birthweight), ]$Birthweight <- median_bw
data[is.na(data$BMI), ]$BMI <- median_bmi
data[is.na(data$BL.Cig.Day), ]$BL.Cig.Day <- median_bl_cig
data[is.na(data$BL.Drks.Day), ]$BL.Drks.Day <- median_bl_drinks
data[is.na(data$N.living.kids), ]$N.living.kids <- median_kids
data[is.na(data$V5..BOP), ]$V5..BOP <- median_bp_v5
# data[is.na(data$Drug.Add), ]$Drug.Add <- mode_drug
data[is.na(data$Use.Alc), ]$Use.Alc <- mode_alc

data <- 
  data %>% 
  select(-Hisp, - Drug.Add) %>% 
  mutate(mediator  =  BL..BOP - V5..BOP) ## add a mediator variable 

```

**Note: I left small steps and explanations for myself for future use** 

# Problem 1 

### 1 - A 

```{r}

mediator_model <- 
  lm(
    mediator ~ 
      Group + Race_ethnicity + Public.Asstce + Use.Tob + N.prev.preg + 
      Live.PTB + BL.GE + BL..BOP + BL..PD.4 + BL..CAL.3, 
    
    data = data
  )
```

### 1 - B 

```{r}
pregnancy_model <- 
  glm(
    `Preg.ended...37.wk` ~ Group * mediator + 
      Race_ethnicity + Public.Asstce + Use.Tob + N.prev.preg + 
      Live.PTB + BL.GE + BL..BOP + BL..PD.4 + BL..CAL.3, 
    
    data = data, 
    family = "binomial"
  )

pregnancy_model_extended <- 
  glm(
    `Preg.ended...37.wk` ~ Group * (mediator + 
      Race_ethnicity + Public.Asstce + Use.Tob + N.prev.preg + 
      Live.PTB + BL.GE + BL..BOP + BL..PD.4 + BL..CAL.3), 
    
    data = data, 
    family = "binomial"
  )



```

```{r}
borthweight_model <- 
  glm(
    Birthweight ~ 
    Group * mediator + Race_ethnicity + Public.Asstce + Use.Tob + 
              N.prev.preg + Live.PTB + BL.GE + BL..BOP + 
              BL..PD.4 + BL..CAL.3, 
    
    data = data, 
    family = "gaussian"
  )

```

### 1 - C 

hold mediator value constant at the observed average and other values for this sample. 

```{r}

mediator_X_bar = mean(data$mediator) ## actually for this data averages match 
mediator_X_bar_se = sd(data$mediator)/sqrt(nrow(data))

potential_mediator_values = seq(from = mediator_X_bar - 3 * mediator_X_bar_se, 
                                to = mediator_X_bar + 3 * mediator_X_bar_se, 
                                by = mediator_X_bar_se)
```

<!--

--> 

<!--
**************************************************
** CDE ESTIMATOR FUCNTION ** 
** AN EXAMPLE TO SHOWCASE 
  WHEN WE EXPECT RESULTS TO MATCH AND NOT MATCH ** 
**************************************************
--> 

```{r conditional cde estimator and values for estimating }

cde_estimator = function(DATA, MEDIATOR_LEVEL, MODEL){
  
    mean(predict(object = MODEL, 
               newdata = DATA %>% select(-Group, -mediator) %>% 
                                  mutate(Group = "T", 
                                         mediator = MEDIATOR_LEVEL), 
               type = "response")
         ) - 
  
    mean(predict(object = MODEL, 
                 newdata = DATA %>% select(-Group, -mediator) %>% 
                                    mutate(Group = "C", 
                                           mediator = MEDIATOR_LEVEL), 
                 type = "response")
         ) 
}

```

### Birthweight CDE - version 1 

```{r birthweight cde }

## get CDE by giving everyone average value of mediator 

cde_estimator(DATA = data, 
              MEDIATOR_LEVEL = mean(data$mediator), 
              MODEL = borthweight_model) 

sapply(potential_mediator_values, function(X) cde_estimator(data, X, borthweight_model) ) 
       
```

### Birthweight CDE - Version 2 

Here we get two contradicting results based on what method we use. Ask David 

```{r}

cde_estimator_2 = function(MEDIATOR_LEVEL, MODEL){
  coef(MODEL)[which(names(coef(MODEL)) == "GroupT")]  + 
    coef(MODEL)[which(names(coef(MODEL)) == "GroupT:mediator")] * MEDIATOR_LEVEL   
}

cde_estimator_2(MEDIATOR_LEVEL = mean(data$mediator), borthweight_model)

sapply(potential_mediator_values, function(X) cde_estimator(data, X, borthweight_model) ) 

```

<!-- 
****************************
** CDE ESIMATION FOR REAL **
****************************
--> 

### Actual Birthweight CDE 

```{r}
borthweight_model_extended <- 
  glm(
    Birthweight ~ 
    Group * (mediator + Race_ethnicity + Public.Asstce + Use.Tob + 
              N.prev.preg + Live.PTB + BL.GE + BL..BOP + 
              BL..PD.4 + BL..CAL.3), 
    
    data = data, 
    family = "gaussian"
  )


```

```{r}

cde_estimator(DATA = data, MEDIATOR_LEVEL = mean(data$mediator), 
              MODEL = borthweight_model_extended) -> bw_cde_at_mean

sapply(potential_mediator_values, 
       function(X) cde_estimator(data, X, borthweight_model_extended) )  -> bw_cdes

```

### Actual Pregnancy CDE 

```{r}

cde_estimator(DATA = data, MEDIATOR_LEVEL = mean(data$mediator), MODEL = pregnancy_model)-> preg_cde_at_mean

sapply(potential_mediator_values, function(X) cde_estimator(data, X, pregnancy_model_extended) )  -> preg_cdes


```

<!--
*****************************
** NIE ESTIMATOR FUCNTION ** 
*****************************
--> 

```{r}

nie_method_1 = function(DATA, OUTCOME_MODEL, MEDIATOR_MODEL){
  
  mediator_under_trt <-  
    predict(object = MEDIATOR_MODEL, 
            newdata = DATA %>% select(-Group, -mediator) %>% 
                                mutate(Group = "T"), 
            type = "response"
            )
  
  outcome_under_trt <- 
    predict(object = OUTCOME_MODEL, 
            newdata = DATA %>% select(-Group, -mediator) %>% 
                                mutate(Group = "T", 
                                       mediator = mediator_under_trt), 
            type = "response"
            )
  
  
  mediator_under_no_trt <-  
    predict(object = MEDIATOR_MODEL, 
            newdata = DATA %>% select(-Group, -mediator) %>% 
                                mutate(Group = "C"), 
            type = "response"
            )
  
  outcome_under_no_trt <- 
    predict(object = OUTCOME_MODEL, 
            newdata = DATA %>% select(-Group, -mediator) %>% 
                                mutate(Group = "T", 
                                       mediator = mediator_under_no_trt), 
            type = "response"
            )
  
  effect = mean(outcome_under_trt) - mean(outcome_under_no_trt)
  return(effect)
}
```

### Birthweight NIE

```{r}

birthweight_nie <- nie_method_1(data, borthweight_model, mediator_model)

```

### Pregnancy - NIE 

```{r}

pregnancy_nie <- nie_method_1(data, pregnancy_model, mediator_model)

```

# All results 

```{r}

resutls_cde <- read_csv("cde_bootstrap_results.csv")

cde_se <- 
  resutls_cde %>% 
  group_by(order) %>% 
  summarise(boot_bw_mean = mean(cde_bw), 
            boot_bw_se = sd(cde_bw), 
            
            boot_preg_mean = mean(cde_preg), 
            boot_preg_se = sd(cde_preg)) 

cde_all_results <- 
  cbind(cde_se, 
        data.frame(preg_cdes = preg_cdes, 
                   bw_cdes = bw_cdes,
                   potential_mediator_values = potential_mediator_values)
        ) %>% 
  mutate(
    preg_low_ci = preg_cdes - 1.96 * boot_preg_se,
    preg_high_ci = preg_cdes + 1.96 * boot_preg_se,
    
    bw_low_ci = bw_cdes - 1.96 * boot_bw_se,
    bw_high_ci = bw_cdes + 1.96 * boot_bw_se
  )
```

```{r}
ggplot(data = cde_all_results, 
       aes(x = potential_mediator_values, 
           y = preg_cdes)) + 
  theme_minimal() + 
  geom_point() + 
  geom_line() + 
  geom_errorbar(aes(ymin = preg_low_ci, ymax = preg_high_ci), width = 0.25)
```

```{r}
ggplot(data = cde_all_results, 
       aes(x = potential_mediator_values, 
           y = bw_cdes)) + 
  theme_minimal() + 
  geom_point() + 
  geom_line() + 
  geom_errorbar(aes(ymin = bw_low_ci, ymax = bw_high_ci), width = 0.25)
```

```{r}
resutls_nie <- read_csv("nie_bootstrap_results.csv")
```

```{r}

birthweight_nie 

sd(resutls_nie$nie_bw)

ggplot(data = resutls_nie, 
       aes(x = nie_bw)) + 
  theme_minimal() + 
  geom_histogram()

birthweight_nie  + 1.96 * sd(resutls_nie$nie_bw)
birthweight_nie  - 1.96 * sd(resutls_nie$nie_bw)

```

```{r}

pregnancy_nie

sd(resutls_nie$nie_preg)


ggplot(data = resutls_nie, 
       aes(x = nie_preg)) + 
  theme_minimal() + 
  geom_histogram()

pregnancy_nie - 1.96 * sd(resutls_nie$nie_preg)
pregnancy_nie + 1.96 * sd(resutls_nie$nie_preg)

```

```{r mother of bootstrap}
#| eval: false 

K = 2500 

resutls_cde <- 
  data.frame(
    iter = integer(), 
    order = integer(), 
    
    cde_bw = numeric(), 
    cde_preg = numeric()
  )

resutls_nie <- 
  data.frame(
    iter = 1:K, 
    
    nie_bw = rep(NA,K), 
    nie_preg = rep(NA,K) 
  )

for(i in 1:K){
  print(i)
  
  ### resample data, calculate values for other conditional effects 
  boot_data <- data[sample(1:nrow(data), replace = T), ]
  
  boot_mediator_X_bar = mean(boot_data$mediator) ## actually for this data averages match 
  boot_mediator_X_bar_se = sd(boot_data$mediator)/sqrt(nrow(boot_data))

  boot_potential_mediator_values = seq(from = boot_mediator_X_bar - 3 * boot_mediator_X_bar_se, 
                                  to = boot_mediator_X_bar + 3 * boot_mediator_X_bar_se, 
                                  by = boot_mediator_X_bar_se)
  
  ### train models 
  boot_borthweight_model_extended <- 
    glm(
      Birthweight ~ 
      Group * (mediator + Race_ethnicity + Public.Asstce + Use.Tob + 
                N.prev.preg + Live.PTB + BL.GE + BL..BOP + 
                BL..PD.4 + BL..CAL.3), 
      
      data = boot_data, 
      family = "gaussian"
    )
  
  boot_pregnancy_model <- 
    glm(
      `Preg.ended...37.wk` ~ Group * (mediator + 
        Race_ethnicity + Public.Asstce + Use.Tob + N.prev.preg + 
        Live.PTB + BL.GE + BL..BOP + BL..PD.4 + BL..CAL.3), 
      
      data = boot_data, 
      family = "binomial"
    )
  
  boot_mediator_model <- 
    lm(
      mediator ~ 
        Group + Race_ethnicity + Public.Asstce + Use.Tob + N.prev.preg + 
        Live.PTB + BL.GE + BL..BOP + BL..PD.4 + BL..CAL.3, 
      
      data = boot_data
    )
  
  
  ### calculate effects 
  
  ### bw cde 
  sapply(boot_potential_mediator_values, function(X) cde_estimator(boot_data, X, 
                                                                   boot_borthweight_model_extended) ) -> bw_cde_boot
  
  ### pregnancy cde 
  sapply(potential_mediator_values, function(X) cde_estimator(data, X, boot_pregnancy_model) ) -> preg_cde_boot
  
  ### save down cde results 
  resutls_cde <- 
    rbind(
      resutls_cde, 
    
      data.frame(
        iter = i, 
        order = seq(from = 1, to = length(boot_potential_mediator_values), by = 1), 
        cde_bw = bw_cde_boot, 
        cde_preg = preg_cde_boot
      )
    )
  ### bw nie
  nie_method_1(boot_data, boot_borthweight_model_extended, boot_mediator_model) -> nie_bw_boot
  
  ### preg nie
  nie_method_1(boot_data, boot_pregnancy_model, boot_mediator_model) -> nie_preg_boot
  
  ### save down cde results 
  resutls_nie$nie_bw[i] <- nie_bw_boot
  resutls_nie$nie_preg[i] <- nie_preg_boot
}

beepr::beep(2)

write.csv(resutls_cde, "cde_bootstrap_results.csv")
write.csv(resutls_nie, "nie_bootstrap_results.csv")

summary(resutls_cde$cde_bw)
hist(resutls_cde$cde_bw)

summary(resutls_cde$cde_preg)
hist(resutls_cde$cde_bw)

summary(resutls_nie$nie_bw)
hist(resutls_nie$nie_bw)

summary(resutls_nie$nie_preg)
hist(resutls_nie$nie_preg)

```


```{r}
#| eval: false 
mediation_model <- mediate(
  model.y = borthweight_model,
  model.m = mediator_model,
  treat = "Group",
  mediator = "mediator",
  robustSE = TRUE  # Optional, for robust standard errors
)

summary(mediation_model)

```

